;###############################
;
; TRSNIC ROUTINES
;
;###############################

NIC_ASM	EQU	-1

CR  EQU 13
LF  EQU 19

NICPORT EQU	31	;TRSNIC Z80 PORT
TCPIP		EQU	20

;TRSNIC API COMMANDS
APISOCK		EQU	1	;SOCKET
APICONN		EQU	2	;CONNECT
APISEND		EQU	3	;SEND
APIRECV		EQU	5	;RECV
APICLOS		EQU	7	;CLOSE

NICIP4		EQU	1	;AF_INET4 (IPV4)
NICTCP		EQU	1	;SOCK_STREAM (TCP)
NICVER		EQU	0	;TRSNIC VERSION
HOSTFRMT	EQU	0	;IP ADDRESS

INTPORT		EQU	0E0H

;
; TRSNIC API
;
; <TCPIP><SOCKET><FAMILY><TYPE><VERSION>
; <TCPIP><CONNECT><SOCKFD><HOST FORMAT><IP4><IP3><IP2><IP1><PORT2><PORT1>
; <TCPIP><SEND><SOCKFD><L4><L3><L2><L1><DATA...>
; <TCPIP><RECV><SOCKFD><L4><L3><L2><L1>
; <TCPIP><CLOSE><SOCKFD>

;THE INPUT/OUTPUT BUFFER
NICBUFF	DS	1000	;CHANGE THESE TO USE SHARED BUFFER WITH MISE/SERIAL
BUFFLEN	EQU	1000
SOCKFD	DS	1			;THE ESTABLISHED SOCKET FILE DESCRIPTOR

WAITINT

	LD	C,INTPORT		;WAIT FOR BUS INTERRUPT FROM TRSNIC
	IN	A,(C)
	BIT	3,A					;BIT 3 IS THE IOBUS INT BIT
	JR	Z,WAITINT		;KEEP WAITING IF BIT IS SET
	RET

;###################################
; NICINIT                          #
;                                  #
; OPEN A TCP/IP CONNECTION         #
; TO A SERVER                      #
;                                  #
; REQUEST:                         #
; DE	DEST PORT                    #
; H		DEST IP4                     #
; L		DEST IP3                     #
; B		DEST IP2                     #
; C		DEST IP1                     #
;                                  #
; WHERE IP4.IP3.IP2.IP1            #
;                                  #
;###################################
NICINIT::

	PUSH	HL	;SAVE CONNECTION PARAMS
	PUSH	BC
	PUSH	DE

;ENABLE MODEL III/4 BUS

	LD	A,16
	LD	C,236
	OUT	(C),A
	
;FIRST CREATE A TCP/IP SOCKET

	LD	IX,NICBUFF
	LD	(IX+0),TCPIP		;TCP/IP PROTOCOL
	LD	(IX+1),APISOCK	;CREATE A SOCKET
	LD	(IX+2),NICIP4		;USE IPV4
	LD	(IX+3),NICTCP		;USE TCP
	LD	(IX+4),NICVER		;TRSNIC TCP/IP API VERSION
	LD	HL,NICBUFF			;SEND BUFFER INTO HL
	LD	B,5							;SEND 5 BYTES
	LD	C,NICPORT				;THE TRSNIC PORT
	OTIR								;SEND 5 BYTE SOCKET COMMAND

	CALL	WAITINT

;HANDLE SOCKET RESPONSE

	LD	C,NICPORT				;THE TRSNIC PORT
	IN	A,(C)						;GET STATUS BYTE
	JP	NZ,SOCKERR
	IN	A,(C)						;SECOND BYTE IS THE SOCKFD
	LD	(SOCKFD),A			;STORE IT

;CONNECT TO THE SERVER

	LD	IX,NICBUFF			;CREATE THE CONNECT COMMAND
	LD	(IX+0),TCPIP		;TCP/IP PROTOCOL
	LD	(IX+1),APICONN	;CONNECT TO SOCKET
	LD	A,(SOCKFD)			;THE ESTABLISHED SOCKFD
	LD	(IX+2),A
	LD	A,HOSTFRMT			;HOST FORMAT = IP ADDRESS
	LD	(IX+3),A

	POP	DE							;GET THE SAVED CONNECTION PARAMS
	POP	BC
	POP	HL

	LD	(IX+4),H				;THE 4 BYTE IP ADDRESS
	LD	(IX+5),L
	LD	(IX+6),B
	LD	(IX+7),C
	LD	(IX+8),D				;THE 2 BYTE PORT
	LD	(IX+9),E
	LD	HL,NICBUFF
	LD	B,10
	LD	C,NICPORT 
	OTIR								;SEND THE CONNECT COMMAND

	CALL	WAITINT

;HANDLE CONNECT RESPONSE

	LD	C,NICPORT				;THE TRSNIC PORT
	IN	A,(C)						;GET STATUS BYTE
	JP	NZ,CONNERR

;WE HAVE SUCCESSFULLY CONNECTED TO SERVER

	RET

;###################################
; NICSEND                          #
;                                  #
; SEND A REQUEST USING TRSNIC      #
;                                  #
; REQUEST:                         #
; 	HL = REQUEST BUFFER            #
; 	DE = REQUEST LENGTH            #
;                                  #
; RESPONSE:                        #
; 	DE = #BYTES ACTUALLY SENT      #
;###################################
NICSEND::

	LD	A,D			;CHECK FOR ZERO LENGTH
	OR	E
	RET	Z			;JUST RETURN IF ZERO LENGTH

	PUSH	HL		;STORE REQUEST BUFFER

;SEND THE TRSNIC SEND HEADER FIRST

	LD	IX,NICBUFF
	LD	(IX+0),TCPIP			;TCP/IP PROTOCOL
	LD	(IX+1),APISEND		;SEND
	LD	A,(SOCKFD)				;THE ESTABLISHED SOCKFD
	LD	(IX+2),A
	LD	(IX+3),0					;MAX 64K REQUEST
	LD	(IX+4),0
	LD	(IX+5),D					;THE REQUEST LENGTH
	LD	(IX+6),E

	LD	HL,NICBUFF
	LD	B,7
	LD	C,NICPORT
	OTIR

	POP	HL				;REQUEST BUFFER INTO HL

;SEND THE COMMAND DATA NEXT

NICSNXT:
	LD	A,(HL)
	OUT	(C),A
	DEC	DE
	INC	HL
	LD	A,D				; CHECK FOR ZERO BYTES LEFT
	OR	E
	JR	NZ,NICSNXT	; PROCESS NEXT DATA BYTE

	CALL	WAITINT

;HANDLE SEND RESPONSE
	LD	C,NICPORT				;THE TRSNIC PORT
	IN	A,(C)						;GET STATUS BYTE
	JP	NZ,SENDERR

	IN	H,(C)
	IN	L,(C)
	IN	D,(C)		;32BIT SENT LEN INTO BCDE
	IN	E,(C)
	PUSH	HL
	POP	BC

	RET


;###################################
; NICRECV                          #
;                                  #
; RECEIVE A RESPONSE USING TRSNIC  #
;                                  #
; NOTE: MAX 64K BYTE RECV ONLY     #
;                                  #
; REQUEST:                         #
;	HL RESPONSE BUFFER               #
;	BCDE RESPONSE BUFFER MAX LEN     #
;   A (0 = BLOCKING, 1 = NONBLOCK) #
;                                  #
; RESPONSE:                        #
;	BCDE #BYTES RETURNED IN BUFFER   #
;###################################
NICRECV::

	PUSH	IX			;WE MODIFY IX
	PUSH	HL			;STORE RESPONSE BUFFER

;SEND THE TRSNIC RECV HEADER FIRST
	LD	IX,NICBUFF
	LD	(IX+3),A				;BLOCKING/NON-BLOCKING
	LD	(IX+0),TCPIP		;TCP/IP PROTOCOL
	LD	(IX+1),APIRECV	;RECV
	LD	A,(SOCKFD)			;THE ESTABLISHED SOCKFD
	LD	(IX+2),A
	LD	(IX+4),0				;SUPPORT MAX 64K PACKETS
	LD	(IX+5),0				; SO THE TOP 2 LEN BYTES ARE ZERO
	LD	(IX+6),D				;THE RESPONSE BUFFER LENGTH
	LD	(IX+7),E

	LD	HL,NICBUFF
	LD	B,8
	LD	C,NICPORT
	OTIR

	CALL	WAITINT

	POP	HL					;RESPONSE BUFFER INTO HL

	LD	C,NICPORT		;THE TRSNIC PORT
	IN	A,(C)				;GET STATUS BYTE
	JP	NZ,RECVERR

	IN	A,(C)				;IGNORE FIRST LEN BYTE
	IN	A,(C)				;IGNORE SECOND LEN BYTE
	IN	D,(C)
	IN	E,(C)

	LD	A,D					;CHECK FOR ZERO LENGTH
	OR	E
	JR	Z,RCVDONE		;JUST RETURN IF ZERO LENGTH

	PUSH	DE				;STORE LENGTH

NICRNXT:

	IN	A,(C)
	LD	(HL),A
	DEC	DE
	INC	HL
	LD	A,D			; CHECK FOR ZERO BYTES LEFT
	OR	E
	JR	NZ,NICRNXT	; PROCESS NEXT DATA BYTE

	LD	BC,0		;MAX 64K RECV SO TOP 2 BYTES ARE ZERO
	POP	DE			;GET STORED LENGTH INTO DE

RCVDONE

	POP	IX			;RESTORE IX
	RET


;###################################
; NICCLOS                          #
;                                  #
; CLOSE THE SOCKET                 #
;                                  #
;###################################
NICCLOS::

	LD	IX,NICBUFF
	LD	(IX+0),TCPIP		;TCP/IP PROTOCOL
	LD	(IX+1),APICLOS	;CLOSE
	LD	A,(SOCKFD)			;THE ESTABLISHED SOCKFD
	LD	(IX+2),A

	LD	HL,NICBUFF
	LD	B,3
	LD	C,NICPORT
	OTIR

	CALL	WAITINT

	LD	C,NICPORT				;THE TRSNIC PORT
	IN	A,(C)						;GET STATUS BYTE
	JP	NZ,CLOSERR

	RET


;SOCKET ERROR HANDLERS
SOCKERR
	LD	HL,EMGSOCK
	JR	DISPERR

CONNERR
	LD	HL,EMGCONN
	JR	DISPERR

SENDERR
	LD	HL,EMGSEND
	JR	DISPERR

RECVERR
	LD	HL,EMGRECV
	JR	DISPERR

CLOSERR
	LD	HL,EMGCLOS

DISPERR			;DISPLAY ERROR MESSAGE

; ENABLE THIS SECTION FOR M4 LSDOS/TRSDOS6
;	LD	A,2
;	RST	28H   ;DISPLAY
;	LD	A,21
;	RST	28H   ;ABORT

; ENABLE THIS SECTION FOR M3
	CALL	4467H ;DISPLAY
	CALL	4030H ;ABORT

;MESSAGES
EMGSOCK	DB	'ERROR CREATING SOCKET',CR,LF
EMGCONN	DB	'ERROR CONNECTING TO SOCKET',CR,LF
EMGSEND	DB	'ERROR SENDING TO SOCKET',CR,LF
EMGRECV	DB	'ERROR RECEIVING FROM SOCKET',CR,LF
EMGCLOS	DB	'ERROR CLOSING SOCKET',CR,LF
	